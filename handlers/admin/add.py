
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ContentType, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.utils.callback_data import CallbackData
from keyboards.default.markups import *
from states import ProductState, CategoryState
from states.product_state import AddRewiewState
from states.product_state import MailingState
from aiogram.types.chat import ChatActions
from handlers.user.menu import settings
from loader import dp, db, bot
from filters import IsAdmin
from hashlib import md5
from aiogram.dispatcher.filters import Text
from aiogram import types


category_cb = CallbackData('category', 'id', 'action')
product_cb = CallbackData('product', 'id', 'action')
red_product_cb = CallbackData('product', 'id', 'price', 'action')

add_product = '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'
delete_category = 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é'

@dp.message_handler(IsAdmin(), text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
async def process_count_of_users(message : Message):
    all_users = db.fetchall('SELECT * FROM all_users')
    await message.answer(f'–ë–æ—Ç–æ–º –ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–æ–ª—å–∫–æ –ª—é–¥–µ–π: {len(all_users)}')


@dp.message_handler(IsAdmin(), text=settings)
async def process_settings(message: Message):

    markup = InlineKeyboardMarkup()

    for idx, title in db.fetchall('SELECT * FROM categories'):

        markup.add(InlineKeyboardButton(
            title, callback_data=category_cb.new(id=idx, action='view')))

    markup.add(InlineKeyboardButton(
        '+ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data='add_category'))

    await message.answer('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', reply_markup=markup)


@dp.callback_query_handler(IsAdmin(), category_cb.filter(action='view'))
async def category_callback_handler(query: CallbackQuery, callback_data: dict, state: FSMContext):

    category_idx = callback_data['id']

    products = db.fetchall('''SELECT * FROM products product
    WHERE product.tag = (SELECT title FROM categories WHERE idx=?)''',
                           (category_idx,))

    await query.message.delete()
    await query.answer('–í—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é.')
    await state.update_data(category_index=category_idx)
    await show_products(query.message, products, category_idx)


# category


@dp.callback_query_handler(IsAdmin(), text='add_category')
async def add_category_callback_handler(query: CallbackQuery):
    await query.message.delete()
    await query.message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏?')
    await CategoryState.title.set()


@dp.message_handler(IsAdmin(), state=CategoryState.title)
async def set_category_title_handler(message: Message, state: FSMContext):

    category = message.text
    idx = md5(category.encode('utf-8')).hexdigest()
    db.query('INSERT INTO categories VALUES (?, ?)', (idx, category))

    await state.finish()
    await process_settings(message)


@dp.message_handler(IsAdmin(), text=delete_category)
async def delete_category_handler(message: Message, state: FSMContext):

    async with state.proxy() as data:

        if 'category_index' in data.keys():

            idx = data['category_index']

            db.query(
                'DELETE FROM products WHERE tag IN (SELECT title FROM categories WHERE idx=?)', (idx,))
            db.query('DELETE FROM categories WHERE idx=?', (idx,))
            markup = ReplyKeyboardMarkup()
            markup.add(add_product)
            markup.add(delete_category)
            markup.add('/–ú–µ–Ω—é')
            await message.answer('–ì–æ—Ç–æ–≤–æ!', reply_markup=markup)
            await process_settings(message)
add_rew = '–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤'

@dp.message_handler(IsAdmin(), text='–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
async def process_start_mailing(message : Message):
    await MailingState.message_text.set()
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(cancel_message)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=markup)
settings = '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞'
orders = 'üöö –ó–∞–∫–∞–∑—ã'
questions = '‚ùì –í–æ–ø—Ä–æ—Å—ã'
open_orders_button = '–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã'
closed_orders_button = '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã'
count_of_users = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'

@dp.message_handler(IsAdmin(), text=add_rew)
async def add_rewiew(message: Message):
    await AddRewiewState.photo_rewiew.set()
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(cancel_message)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –æ—Ç–∑—ã–≤–∞', reply_markup=markup)

@dp.message_handler(IsAdmin(), content_types=ContentType.PHOTO, state=AddRewiewState.photo_rewiew)
async def final_add_rewiew(message: Message, state: FSMContext):
    fileID = message.photo[-1].file_id
    file_info = await bot.get_file(fileID)
    downloaded_file = (await bot.download_file(file_info.file_path)).read()
    db.query('INSERT INTO rewiews VALUES (?)',
             (downloaded_file,))
    markup = ReplyKeyboardMarkup(selective=True)
    markup.add(settings)
    markup.add(questions, open_orders_button)
    markup.add(closed_orders_button, '–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
    # markup.add(open_orders_button)
    markup.add(count_of_users)
    markup.add(add_rew)
    await message.answer('–û—Ç–∑—ã–≤ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=markup)
    await state.finish()

@dp.message_handler(IsAdmin(), text=cancel_message, state=AddRewiewState.photo_rewiew)
async def cancel_add_rewiew(message: Message, state: FSMContext):
    markup = ReplyKeyboardMarkup(selective=True)
    markup.add(settings)
    markup.add(questions, open_orders_button)
    markup.add(closed_orders_button, '–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
    # markup.add(open_orders_button)
    markup.add(count_of_users)
    markup.add(add_rew)
    await message.answer('–û–∫, –æ—Ç–º–µ–Ω–µ–Ω–æ!', reply_markup=markup)
    await state.finish()

@dp.message_handler(IsAdmin(), text=cancel_message, state=MailingState.message_text)
async def mailing_cancel(message : Message, state : FSMContext):
    #–¢—É—Ç–∞
    markup = ReplyKeyboardMarkup(selective=True)
    markup.add(settings)
    markup.add(questions, open_orders_button)
    markup.add(closed_orders_button, '–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
    # markup.add(open_orders_button)
    markup.add(count_of_users)
    markup.add(add_rew)
    await message.answer('–û–∫, –æ—Ç–º–µ–Ω–µ–Ω–æ!', reply_markup=markup)
    await state.finish()
# add product
@dp.message_handler(IsAdmin(), state=MailingState.message_text)
async def process_message_text(message : Message, state : FSMContext):
    async with state.proxy() as data:
        data['message_text'] = message.text
    await MailingState.next()
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(cancel_message)
    await message.answer('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–∫—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=markup)

@dp.message_handler(IsAdmin(), text=cancel_message, state=MailingState.image)
async def process_mestxt_cancel(message : Message, state : FSMContext):
    markup = ReplyKeyboardMarkup(selective=True)
    markup.add(settings)
    markup.add(questions, open_orders_button)
    markup.add(closed_orders_button, '–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
    # markup.add(open_orders_button)
    markup.add(count_of_users)
    await message.answer('–û–∫, –æ—Ç–º–µ–Ω–µ–Ω–æ!', reply_markup=markup)
    await state.finish()

@dp.message_handler(IsAdmin(), content_types=ContentType.PHOTO,state=MailingState.image)
async def mailing_get_image(message : Message, state : FSMContext):
    fileID = message.photo[-1].file_id
    file_info = await bot.get_file(fileID)
    downloaded_file = (await bot.download_file(file_info.file_path)).read()
    markup = ReplyKeyboardMarkup()
    markup.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º')
    markup.add('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')

    async with state.proxy() as data:
        data['image'] = downloaded_file
        await MailingState.next()
        await message.answer_photo(photo=data['image'],
                             caption=data['message_text'],
                                   reply_markup=markup)

@dp.message_handler(IsAdmin(), text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é',state=MailingState.confirm)
async def mailing_final_cancel(message: Message, state : FSMContext):
    markup = ReplyKeyboardMarkup(selective=True)
    markup.add(settings)
    markup.add(questions, open_orders_button)
    markup.add(closed_orders_button, '–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
    # markup.add(open_orders_button)
    markup.add(count_of_users)
    await message.answer('–û–∫, –æ—Ç–º–µ–Ω–µ–Ω–æ!', reply_markup=markup)
    await state.finish()

@dp.message_handler(IsAdmin(), text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º',state=MailingState.confirm)
async def mailing_final_sendall(message: Message, state : FSMContext):
    users = db.fetchall('SELECT cid FROM all_users')
    counter = 0
    for user in users:
        try:
            async with state.proxy() as data:
                await bot.send_photo(chat_id=user[0],
                                     photo=data['image'],
                                     caption=data['message_text'])
                counter += 1
        except:
            pass
    markup = ReplyKeyboardMarkup(selective=True)
    markup.add(settings)
    markup.add(questions, open_orders_button)
    markup.add(closed_orders_button, '–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
    # markup.add(open_orders_button)
    markup.add(count_of_users)
    await message.answer(f'–ë—ã–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, —É—Å–ø–µ—à–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {counter} —Å–æ–æ–±—â–µ–Ω–∏–π', reply_markup=markup)
    await state.finish()



@dp.message_handler(IsAdmin(), text=add_product)
async def process_add_product(message: Message):
    await ProductState.title.set()
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(cancel_message)
    await message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ?', reply_markup=markup)
@dp.message_handler(IsAdmin(), text=cancel_message, state=ProductState.title)
async def process_cancel(message: Message, state: FSMContext):

    await message.answer('–û–∫, –æ—Ç–º–µ–Ω–µ–Ω–æ!', reply_markup=ReplyKeyboardRemove())
    await state.finish()

    await process_settings(message)
@dp.message_handler(IsAdmin(), text=back_message, state=ProductState.title)
async def process_title_back(message: Message, state: FSMContext):
    await process_add_product(message)
@dp.message_handler(IsAdmin(), state=ProductState.title)
async def process_title(message: Message, state: FSMContext):

    async with state.proxy() as data:
        data['title'] = message.text

    await ProductState.next()
    await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ?', reply_markup=back_markup())
@dp.message_handler(IsAdmin(), text=back_message, state=ProductState.body)
async def process_body_back(message: Message, state: FSMContext):

    await ProductState.title.set()

    async with state.proxy() as data:

        await message.answer(f"–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å <b>{data['title']}</b>?", reply_markup=back_markup())
@dp.message_handler(IsAdmin(), state=ProductState.body)
async def process_body(message: Message, state: FSMContext):

    async with state.proxy() as data:
        data['body'] = message.text

    await ProductState.next()
    await message.answer('–§–æ—Ç–æ?', reply_markup=back_markup())
@dp.message_handler(IsAdmin(), content_types=ContentType.PHOTO, state=ProductState.image)
async def process_image_photo(message: Message, state: FSMContext):

    fileID = message.photo[-1].file_id
    file_info = await bot.get_file(fileID)
    downloaded_file = (await bot.download_file(file_info.file_path)).read()

    async with state.proxy() as data:
        data['image'] = downloaded_file

    await ProductState.next()
    await message.answer('–¶–µ–Ω–∞?', reply_markup=back_markup())


@dp.message_handler(IsAdmin(), content_types=ContentType.TEXT, state=ProductState.image)
async def process_image_url(message: Message, state: FSMContext):

    if message.text == back_message:

        await ProductState.body.set()

        async with state.proxy() as data:

            await message.answer(f"–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å <b>{data['body']}</b>?", reply_markup=back_markup())

    else:

        await message.answer('–í–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.')


@dp.message_handler(IsAdmin(), lambda message: not message.text.isdigit(), state=ProductState.price)
async def process_price_invalid(message: Message, state: FSMContext):

    if message.text == back_message:

        await ProductState.image.set()

        async with state.proxy() as data:

            await message.answer("–î—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?", reply_markup=back_markup())

    else:

        await message.answer('–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞!')


@dp.message_handler(IsAdmin(), lambda message: message.text.isdigit(), state=ProductState.price)
async def process_price(message: Message, state: FSMContext):

    async with state.proxy() as data:

        data['price'] = message.text

        title = data['title']
        body = data['body']
        price = data['price']

        await ProductState.next()
        text = f'<b>{title}</b>\n\n{body}\n\n–¶–µ–Ω–∞: {price} —Ä—É–±–ª–µ–π.'

        markup = check_markup()

        await message.answer_photo(photo=data['image'],
                                   caption=text,
                                   reply_markup=markup)


@dp.message_handler(IsAdmin(), lambda message: message.text not in [back_message, all_right_message], state=ProductState.confirm)
async def process_confirm_invalid(message: Message, state: FSMContext):
    await message.answer('–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ –±—ã–ª–æ.')


@dp.message_handler(IsAdmin(), text=back_message, state=ProductState.confirm)
async def process_confirm_back(message: Message, state: FSMContext):

    await ProductState.price.set()

    async with state.proxy() as data:

        await message.answer(f"–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É —Å <b>{data['price']}</b>?", reply_markup=back_markup())


@dp.message_handler(IsAdmin(), text=all_right_message, state=ProductState.confirm)
async def process_confirm(message: Message, state: FSMContext):

    async with state.proxy() as data:

        title = data['title']
        body = data['body']
        image = data['image']
        price = data['price']

        tag = db.fetchone(
            'SELECT title FROM categories WHERE idx=?', (data['category_index'],))[0]
        idx = md5(' '.join([title, body, price, tag]
                           ).encode('utf-8')).hexdigest()

        db.query('INSERT INTO products VALUES (?, ?, ?, ?, ?, ?)',
                 (idx, title, body, image, int(price), tag))

    await state.finish()
    markup = ReplyKeyboardMarkup()
    markup.add(add_product)
    markup.add(delete_category)
    markup.add('/–ú–µ–Ω—é')
    await message.answer('–ì–æ—Ç–æ–≤–æ!', reply_markup=markup)
    await process_settings(message)


# delete product


@dp.callback_query_handler(IsAdmin(), product_cb.filter(action='delete'))
async def delete_product_callback_handler(query: CallbackQuery, callback_data: dict):

    product_idx = callback_data['id']
    db.query('DELETE FROM products WHERE idx=?', (product_idx,))
    await query.answer('–£–¥–∞–ª–µ–Ω–æ!')
    await query.message.delete()



@dp.callback_query_handler(IsAdmin(), product_cb.filter(action='up_price'))
async def redact_price_handler(query: CallbackQuery, callback_data: dict):
    product_idx = callback_data['id']
    current_price = db.fetchall('SELECT price FROM products WHERE idx=?', (product_idx,))[0][0]
    db.query('''UPDATE products
                        SET price = ?
                        WHERE idx = ?''', (current_price+1, product_idx))
    await query.message.answer('–¶–µ–Ω–∞ –ø–æ–¥–Ω—è—Ç–∞!')

@dp.callback_query_handler(IsAdmin(), product_cb.filter(action='down_price'))
async def redact_price_handler(query: CallbackQuery, callback_data: dict):
    product_idx = callback_data['id']
    current_price = db.fetchall('SELECT price FROM products WHERE idx=?', (product_idx,))[0][0]
    db.query('''UPDATE products
                        SET price = ?
                        WHERE idx = ?''', (current_price-1, product_idx))
    await query.message.answer('–¶–µ–Ω–∞ —Å–Ω–∏–∂–µ–Ω–∞!')

async def show_products(m, products, category_idx):

    await bot.send_chat_action(m.chat.id, ChatActions.TYPING)

    for idx, title, body, image, price, tag in products:

        text = f'<b>{title}</b>\n\n{body}\n\n–¶–µ–Ω–∞: {price} —Ä—É–±.'

        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(
            'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', callback_data=product_cb.new(id=idx, action='delete')))
        markup.add(InlineKeyboardButton(
            '–ü–æ–¥–Ω—è—Ç—å —Ü–µ–Ω—É –Ω–∞ —Ä—É–±–ª—å', callback_data=product_cb.new(id=idx, action='up_price')))
        markup.add(InlineKeyboardButton(
            '–°–Ω–∏–∑–∏—Ç—å —Ü–µ–Ω—É –Ω–∞ —Ä—É–±–ª—å', callback_data=product_cb.new(id=idx, action='down_price')))

        await m.answer_photo(photo=image,
                             caption=text,
                             reply_markup=markup)

    markup = ReplyKeyboardMarkup()
    markup.add(add_product)
    markup.add(delete_category)
    markup.add('/–ú–µ–Ω—é')

    await m.answer('–•–æ—Ç–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å?', reply_markup=markup)
