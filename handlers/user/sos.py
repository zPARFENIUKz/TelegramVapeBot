
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove
from keyboards.default.markups import all_right_message, cancel_message, submit_markup
from aiogram.types import Message
from states import SosState
from filters import IsUser
from loader import dp, db


@dp.message_handler(commands='sos')
async def cmd_sos(message: Message):
    await SosState.question.set()
    await message.answer('–í —á–µ–º —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã? –û–ø–∏—à–∏—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–µ–µ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç.', reply_markup=ReplyKeyboardRemove())


@dp.message_handler(state=SosState.question)
async def process_question(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['question'] = message.text

    await message.answer('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –≤–µ—Ä–Ω–æ.', reply_markup=submit_markup())
    await SosState.next()


@dp.message_handler(lambda message: message.text not in [cancel_message, all_right_message], state=SosState.submit)
async def process_price_invalid(message: Message):
    await message.answer('–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ –±—ã–ª–æ.')

from aiogram.types import ReplyKeyboardMarkup
catalog = 'üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥'
balance = 'üí∞ –ë–∞–ª–∞–Ω—Å'
cart = 'üõí –ö–æ—Ä–∑–∏–Ω–∞'
delivery_status = 'üöö –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞'
rewiews = 'üòé –û—Ç–∑—ã–≤—ã'
@dp.message_handler(text=cancel_message, state=SosState.submit)
async def process_cancel(message: Message, state: FSMContext):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(catalog)
    # markup.add(balance, cart)
    markup.add(cart)
    markup.add(delivery_status)
    #markup.add(rewiews)
    await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ!', reply_markup=markup)
    await state.finish()


@dp.message_handler(text=all_right_message, state=SosState.submit)
async def process_submit(message: Message, state: FSMContext):

    cid = message.chat.id

    #if db.fetchone('SELECT * FROM questions WHERE cid=?', (cid,)) == None:
    if True:

        async with state.proxy() as data:
            db.query('INSERT INTO questions VALUES (?, ?)',
                     (cid, data['question']))
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(catalog)
        # markup.add(balance, cart)
        markup.add(cart)
        markup.add(delivery_status)
        #markup.add(rewiews)
        await message.answer('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', reply_markup=markup)

    else:

        await message.answer('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.', reply_markup=ReplyKeyboardRemove())

    await state.finish()
