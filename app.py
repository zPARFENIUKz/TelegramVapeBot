
import os
import handlers
from aiogram import executor, types
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove
from data import config
from loader import dp, db, bot
import filters
import logging

filters.setup(dp)

WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.environ.get("PORT", 5000))
user_message = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
admin_message = '–ê–¥–º–∏–Ω'
catalog = 'üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥'
balance = 'üí∞ –ë–∞–ª–∞–Ω—Å'
cart = 'üõí –ö–æ—Ä–∑–∏–Ω–∞'
delivery_status = 'üöö –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞'
rewiews = 'üòé –û—Ç–∑—ã–≤—ã'


settings = '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞'
orders = 'üöö –ó–∞–∫–∞–∑—ã'
questions = '‚ùì –í–æ–ø—Ä–æ—Å—ã'
closed_orders_button = '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã'
count_of_users = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'



@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    if not db.user_exists(message.from_user.id):
        db.query(f'INSERT OR IGNORE INTO all_users(cid) VALUES({message.from_user.id})')

    #markup.row(user_message, admin_message)
    #markup.row('/–ú–µ–Ω—é')
    markup.add(catalog)
    # markup.add(balance, cart)
    markup.add(cart)
    markup.add(delivery_status)
    #markup.add(rewiews)

    await message.answer('''–†–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å üòé

üõçÔ∏è –í –ö–∞—Ç–∞–ª–æ–≥–µ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—Éüòé
    
üõí –í –ö–æ—Ä–∑–∏–Ω–µ —Ç—ã –º–æ–∂–µ—à—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.

üöö –ù—É –∞ –≤ –≥—Ä–∞—Ñ–µ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –∑–∞–∫–∞–∑ –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–ºüòé

üì¶ –î–ª—è –æ–ø—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤, –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä –∏ –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ, –∏ –æ—Ñ–æ—Ä–º–∏ –∑–∞–∫–∞–∑. –ú–µ–Ω–µ–¥–∂–µ—Ä –±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –æ—Ç–ø–∏—à–µ—Ç—Å—è. 

‚ùì –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, —Å–º–µ–ª–æ –ø–∏—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—Éüòè \n@vape_brest_manager.
    ''', reply_markup=markup)


@dp.message_handler(text=user_message)
async def user_mode(message: types.Message):

    cid = message.chat.id
    if cid in config.ADMINS:
        config.ADMINS.remove(cid)

    markup = ReplyKeyboardMarkup(resize_keyboard=True)

    # markup.row(user_message, admin_message)
    # markup.row('/–ú–µ–Ω—é')
    markup.add(catalog)
    # markup.add(balance, cart)
    markup.add(cart)
    markup.add(delivery_status)
    #markup.add(rewiews)

    await message.answer('–í–∫–ª—é—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º.', reply_markup=markup)
    await message.delete()



@dp.message_handler(text=admin_message)
async def admin_mode(message: types.Message):

    cid = message.chat.id
    if cid not in config.ADMINS:
        config.ADMINS.append(cid)

    add_rew = '–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤'
    markup = ReplyKeyboardMarkup(selective=True)
    markup.add(settings)
    open_orders_button = '–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã'
    markup.add(questions, open_orders_button)
    markup.add(closed_orders_button, '–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
    #markup.add(open_orders_button)
    markup.add(count_of_users)
    markup.add(add_rew)

    await message.answer('–í–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º.', reply_markup=markup)
    await message.delete()


async def on_startup(dp):
    logging.basicConfig(level=logging.INFO)
    db.create_tables()

    await bot.delete_webhook()
    await bot.set_webhook(config.WEBHOOK_URL)


async def on_shutdown():
    logging.warning("Shutting down..")
    await bot.delete_webhook()
    await dp.storage.close()
    await dp.storage.wait_closed()
    logging.warning("Bot down")


if __name__ == '__main__':

    if "HEROKU" in list(os.environ.keys()):

        executor.start_webhook(
            dispatcher=dp,
            webhook_path=config.WEBHOOK_PATH,
            on_startup=on_startup,
            on_shutdown=on_shutdown,
            skip_updates=True,
            host=WEBAPP_HOST,
            port=WEBAPP_PORT,
        )

    else:

        executor.start_polling(dp, on_startup=on_startup, skip_updates=False)
